// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("store-billboard")
  categories Category[]  @relation("store-category")
  sizes      Size[]      @relation("store-size")
  colors     Color[]     @relation("store-color")
  products   Product[]   @relation("store-product")
  orders     Order[]     @relation("store-order")
}

model Billboard {
  id       String @id @default(uuid())
  label    String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId  String
  store    Store      @relation("store-billboard", fields: [storeId], references: [id])
  category Category[]

  @@index([storeId])
}

model Category {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId   String
  store     Store     @relation("store-category", fields: [storeId], references: [id])
  bbId      String
  billboard Billboard @relation(fields: [bbId], references: [id])
  Product   Product[] @relation("category-product")

  @@index([storeId])
  @@index([bbId])
}

model Size {
  id    String @id @default(cuid())
  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId String
  store   Store     @relation("store-size", fields: [storeId], references: [id])
  Product Product[]

  @@index([storeId])
}

model Color {
  id    String @id @default(cuid())
  name  String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId  String
  store    Store     @relation("store-color", fields: [storeId], references: [id])
  products Product[]

  @@index([storeId])
}

model Product {
  id         String  @id @default(cuid())
  name       String
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images     Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId    String
  store      Store       @relation("store-product", fields: [storeId], references: [id])
  catId      String
  category   Category    @relation("category-product", fields: [catId], references: [id])
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
  @@index([catId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id  String @id @default(uuid())
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  prodId  String
  product Product @relation(fields: [prodId], references: [id], onDelete: Cascade)

  @@index([prodId])
}

model Order {
  id      String  @id @default(uuid())
  isPaid  Boolean @default(false)
  phone   String  @default("")
  address String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  storeId    String
  store      Store       @relation("store-order", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([productId])
  @@index([orderId])
}
